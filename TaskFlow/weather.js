(() => {
  const cityEl = document.getElementById('weather-city');
  const tempEl = document.getElementById('weather-temp');
  const descEl = document.getElementById('weather-desc');
  const windEl = document.getElementById('weather-wind');
  const iconEl = document.getElementById('weather-icon');

  if (!cityEl || !tempEl) return;

  const state = { lat: null, lon: null };

  function iconFor(code) {
    // Open-Meteo weathercode mapping simplified
    if ([0].includes(code)) return '‚òÄÔ∏è';
    if ([1,2].includes(code)) return 'üå§Ô∏è';
    if ([3].includes(code)) return '‚õÖ';
    if ([45,48].includes(code)) return 'üå´Ô∏è';
    if ([51,53,55,56,57].includes(code)) return 'üå¶Ô∏è';
    if ([61,63,65,66,67,80,81,82].includes(code)) return 'üåßÔ∏è';
    if ([71,73,75,77,85,86].includes(code)) return '‚ùÑÔ∏è';
    if ([95,96,99].includes(code)) return '‚õàÔ∏è';
    return '‚õÖ';
  }

  function describe(code) {
    const map = {
      0: '–Ø—Å–Ω–æ', 1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ', 2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', 3: '–ü–∞—Å–º—É—Ä–Ω–æ',
      45: '–¢—É–º–∞–Ω', 48: '–¢—É–º–∞–Ω', 51: '–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å', 53: '–ú–æ—Ä–æ—Å—å', 55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
      56: '–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å', 57: '–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å', 61: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 63: '–î–æ–∂–¥—å', 65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      66: '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å', 67: '–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å', 71: '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 73: '–°–Ω–µ–≥', 75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
      77: '–°–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞', 80: '–õ–∏–≤–Ω–∏', 81: '–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏', 82: '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏', 85: '–°–Ω–µ–≥–æ–≤—ã–µ –ª–∏–≤–Ω–∏', 86: '–°–∏–ª—å–Ω—ã–µ —Å–Ω–µ–≥–æ–≤—ã–µ –ª–∏–≤–Ω–∏',
      95: '–ì—Ä–æ–∑–∞', 96: '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º', 99: '–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º',
    };
    return map[code] || '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
  }

  async function fetchWeather(lat, lon) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`;
    const res = await fetch(url);
    if (!res.ok) throw new Error('weather request failed');
    return res.json();
  }

  async function reverseGeocode(lat, lon) {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
      if (!res.ok) throw new Error();
      const data = await res.json();
      return data.address?.city || data.address?.town || data.address?.village || data.display_name || '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
    } catch (_) {
      return '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
    }
  }

  function render(current, place) {
    const t = Math.round(current.temperature);
    const w = current.windspeed;
    const code = current.weathercode;
    tempEl.textContent = `${t}¬∞`;
    descEl.textContent = describe(code);
    windEl.textContent = `–í–µ—Ç–µ—Ä ${Math.round(w)} –º/—Å`;
    cityEl.textContent = place;
    if (iconEl) iconEl.textContent = iconFor(code);
  }

  function onLocation(lat, lon) {
    Promise.all([fetchWeather(lat, lon), reverseGeocode(lat, lon)])
      .then(([w, place]) => {
        render(w.current_weather, place);
      })
      .catch(() => {
        descEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É';
      });
  }

  function requestGeo() {
    if (!navigator.geolocation) {
      descEl.textContent = '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
      return;
    }
    navigator.geolocation.getCurrentPosition(
      (pos) => onLocation(pos.coords.latitude, pos.coords.longitude),
      () => {
        descEl.textContent = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω';
      },
      { timeout: 8000 }
    );
  }

  requestGeo();
})();


